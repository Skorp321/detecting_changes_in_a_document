import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime
import os
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")


def create_highlighted_html(text, is_original=True, highlighted_text=None):
    """–°–æ–∑–¥–∞–µ—Ç HTML —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    if not text or text == "N/A":
        return f'<div style="color: {"#d32f2f" if is_original else "#2e7d32"}; font-weight: bold; font-style: italic;">–ü—É—Å—Ç–æ</div>'

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∏–∑ backend, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if highlighted_text:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–∑ backend –≤ HTML
        # [-]—Ç–µ–∫—Å—Ç[/-] -> –∫—Ä–∞—Å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
        # [+]—Ç–µ–∫—Å—Ç[/+] -> –∑–µ–ª–µ–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
        html_text = highlighted_text
        html_text = re.sub(
            r"\[-\](.*?)\[/-\]",
            r'<span style="background-color: #ffcdd2; color: #d32f2f; font-weight: bold;">\1</span>',
            html_text,
        )
        html_text = re.sub(
            r"\[\+\](.*?)\[/\+\]",
            r'<span style="background-color: #c8e6c9; color: #2e7d32; font-weight: bold;">\1</span>',
            html_text,
        )
        html_text = html_text.replace("\n", "<br>")
    else:
        # Fallback: –ø—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —á–∏—Å–µ–ª
        html_text = text.replace("\n", "<br>")
        if is_original:
            html_text = re.sub(
                r"(\d+)",
                r'<span style="background-color: #ffcdd2; color: #d32f2f; font-weight: bold;">\1</span>',
                html_text,
            )
        else:
            html_text = re.sub(
                r"(\d+)",
                r'<span style="background-color: #c8e6c9; color: #2e7d32; font-weight: bold;">\1</span>',
                html_text,
            )

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π
    if is_original:
        return f'<div style="border-left: 4px solid #d32f2f; padding: 10px; margin: 5px 0; border-radius: 4px; font-size: 14px; line-height: 1.4;">{html_text}</div>'
    else:
        return f'<div style="border-left: 4px solid #2e7d32; padding: 10px; margin: 5px 0; border-radius: 4px; font-size: 14px; line-height: 1.4;">{html_text}</div>'


def highlight_changes(original_text, modified_text):
    """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é HTML"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç create_highlighted_html, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ
    pass


def create_comparison_html(
    original_text, modified_text, highlighted_original=None, highlighted_modified=None
):
    """–°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π"""

    original_html = create_highlighted_html(
        original_text, is_original=True, highlighted_text=highlighted_original
    )
    modified_html = create_highlighted_html(
        modified_text, is_original=False, highlighted_text=highlighted_modified
    )

    comparison_html = f"""
    <div style="display: flex; gap: 20px; margin: 10px 0;">
        <div style="flex: 1;">
            <h4 style="color: #d32f2f; margin-bottom: 10px;">üìÑ –†–µ–¥–∞–∫—Ü–∏—è –°–ë–õ:</h4>
            {original_html}
        </div>
        <div style="flex: 1;">
            <h4 style="color: #2e7d32; margin-bottom: 10px;">üìù –†–µ–¥–∞–∫—Ü–∏—è –ª–∏–∑–∏–Ω–≥–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—è:</h4>
            {modified_html}
        </div>
    </div>
    """

    return comparison_html


def upload_documents():
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    st.header("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìã –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–∞–Ω–∏–∏")
        company_doc = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏", type=["pdf", "docx", "txt"], key="company_doc"
        )

        if company_doc:
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {company_doc.name}")
            st.info(f"–†–∞–∑–º–µ—Ä: {company_doc.size / 1024:.1f} KB")

    with col2:
        st.subheader("üë§ –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞")
        client_doc = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞", type=["pdf", "docx", "txt"], key="client_doc"
        )

        if client_doc:
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {client_doc.name}")
            st.info(f"–†–∞–∑–º–µ—Ä: {client_doc.size / 1024:.1f} KB")

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if company_doc and client_doc:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    files = {
                        "reference_doc": (
                            company_doc.name,
                            company_doc.getvalue(),
                            company_doc.type,
                        ),
                        "client_doc": (
                            client_doc.name,
                            client_doc.getvalue(),
                            client_doc.type,
                        ),
                    }

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
                    response = requests.post(
                        f"{API_BASE_URL}/api/compare",
                        files=files,
                        timeout=300,  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                    )

                    if response.status_code == 200:
                        result = response.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session state
                        st.session_state.analysis_result = result
                        st.session_state.analysis_completed = True
                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                        st.rerun()
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {response.text}")

                except requests.exceptions.Timeout:
                    st.error("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                except requests.exceptions.ConnectionError:
                    st.error(
                        "üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω."
                    )
                except Exception as e:
                    st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")


def display_results():
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    if not st.session_state.get("analysis_completed", False):
        st.info(
            "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'"
        )
        return

    result = st.session_state.get("analysis_result")
    if not result:
        st.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
    st.subheader("üìã –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
    summary = result.get("summary", {})

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π", summary.get("totalChanges", 0))

    with col2:
        st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π", summary.get("criticalChanges", 0))

    with col3:
        st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", summary.get("processingTime", "N/A"))

    with col4:
        st.metric("ID –∞–Ω–∞–ª–∏–∑–∞", result.get("analysisId", "N/A")[:8] + "...")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    st.subheader("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    doc_info = summary.get("documentPair", {})
    col1, col2 = st.columns(2)

    with col1:
        st.info(f"**–î–æ–∫—É–º–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏:** {doc_info.get('referenceDoc', 'N/A')}")

    with col2:
        st.info(f"**–î–æ–∫—É–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞:** {doc_info.get('clientDoc', 'N/A')}")

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    st.subheader("ÔøΩ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    changes = result.get("changes", [])
    if not changes:
        st.info("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        return

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    df_data = []
    for change in changes:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–∑ backend
        original_text = change.get("originalText", "N/A")
        modified_text = change.get("modifiedText", "N/A")
        highlighted_original = change.get("highlightedOriginal", original_text)
        highlighted_modified = change.get("highlightedModified", modified_text)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤ markdown —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        # [-]—Ç–µ–∫—Å—Ç[/-] -> **—Ç–µ–∫—Å—Ç** (–∂–∏—Ä–Ω—ã–π –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ)
        # [+]—Ç–µ–∫—Å—Ç[/+] -> **—Ç–µ–∫—Å—Ç** (–∂–∏—Ä–Ω—ã–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ)
        original_markdown = re.sub(r"\[-\](.*?)\[/-\]", r"**\1**", highlighted_original)
        original_markdown = re.sub(r"\[\+\](.*?)\[/\+\]", r"**\1**", original_markdown)

        modified_markdown = re.sub(r"\[-\](.*?)\[/-\]", r"**\1**", highlighted_modified)
        modified_markdown = re.sub(r"\[\+\](.*?)\[/\+\]", r"**\1**", modified_markdown)

        # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Å–ª—É–∂–± —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        services = change.get("requiredServices", [])
        if services:
            services_text = ", ".join([f"{service}" for service in services])
        else:
            services_text = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã"

        df_data.append(
            {
                "–†–µ–¥–∞–∫—Ü–∏—è –°–ë–õ": original_markdown,
                "–†–µ–¥–∞–∫—Ü–∏—è –ª–∏–∑–∏–Ω–≥–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—è": modified_markdown,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ LLM": change.get("llmComment", "N/A"),
                "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è": services_text,
            }
        )

    df = pd.DataFrame(df_data)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    st.markdown("### üìã –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    st.dataframe(
        df,
        use_container_width=True,
        column_config={
            "–†–µ–¥–∞–∫—Ü–∏—è –°–ë–õ": st.column_config.TextColumn(
                "–†–µ–¥–∞–∫—Ü–∏—è –°–ë–õ",
                width="medium",
                help="–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏",
            ),
            "–†–µ–¥–∞–∫—Ü–∏—è –ª–∏–∑–∏–Ω–≥–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—è": st.column_config.TextColumn(
                "–†–µ–¥–∞–∫—Ü–∏—è –ª–∏–∑–∏–Ω–≥–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                width="medium",
                help="–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞",
            ),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ LLM": st.column_config.TextColumn(
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ LLM",
                width="large",
                help="–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            ),
            "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è": st.column_config.TextColumn(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è",
                width="medium",
                help="–°–ª—É–∂–±—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            ),
        },
        hide_index=True,
    )

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
    st.subheader("üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    for i, change in enumerate(changes):
        with st.expander(
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ {i+1}: {change.get('changeType', 'N/A')} - {change.get('severity', 'N/A')}"
        ):

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é HTML
            original_text = change.get("originalText", "N/A")
            modified_text = change.get("modifiedText", "N/A")
            highlighted_original = change.get("highlightedOriginal", None)
            highlighted_modified = change.get("highlightedModified", None)

            comparison_html = create_comparison_html(
                original_text, modified_text, highlighted_original, highlighted_modified
            )
            st.markdown(comparison_html, unsafe_allow_html=True)

            # –ê–Ω–∞–ª–∏–∑ –ò–ò
            st.markdown("**ü§ñ –ê–Ω–∞–ª–∏–∑ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:**")
            st.info(change.get("llmComment", "N/A"))

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å–ª—É–∂–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
            col3, col4 = st.columns(2)

            with col3:
                st.markdown("**üè¢ –°–ª—É–∂–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:**")

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª—É–∂–±—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
                standard_services = [
                    "–Æ—Ä–£",
                    "–î–°–ö–ë", 
                    "–ü–ê",
                    "–§–°",
                    "–£–°–î–°",
                    "–†–î/–£–ë–£",
                    "–ö–î",
                ]
                
                service_descriptions = {
                    "–Æ—Ä–£": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    "–î–°–ö–ë": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Å–∫–æ—Ä–∏–Ω–≥–∞ –∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
                    "–ü–ê": "–ü—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑",
                    "–§–°": "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–ª—É–∂–±–∞",
                    "–£–°–î–°": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏",
                    "–†–î/–£–ë–£": "–†–∏—Å–∫-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç/–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—É—Å–ª—É–≥",
                    "–ö–î": "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç"
                }
                
                current_services = change.get("requiredServices", [])

                # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ª—É–∂–±—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ—Ç–∫–æ–π
                selected_change_services = []
                
                for service in standard_services:
                    is_selected = service in current_services
                    description = service_descriptions.get(service, service)
                    
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
                    checkbox_key = f"change_{i}_{service}_{change.get('id', i)}"
                    
                    if st.checkbox(
                        f"{service} - {description}",
                        value=is_selected,
                        key=checkbox_key,
                        help=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–µ–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é: {'–î–∞' if is_selected else '–ù–µ—Ç'}"
                    ):
                        selected_change_services.append(service)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
                if current_services:
                    st.success(f"‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç {len(current_services)} —Å–ª—É–∂–± –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è")
                    st.markdown(f"**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ:** {', '.join(current_services)}")
                else:
                    st.warning("‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–ª—É–∂–±—ã")

            with col4:
                st.markdown("**üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                st.markdown(f"‚Ä¢ **–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è:** {change.get('changeType', 'N/A')}")
                st.markdown(f"‚Ä¢ **–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:** {change.get('severity', 'N/A')}")
                st.markdown(f"‚Ä¢ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {(change.get('confidence', 0) * 100):.1f}%")
                st.markdown(f"‚Ä¢ **–î–∞—Ç–∞:** {change.get('createdAt', 'N/A')}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if selected_change_services:
                    st.markdown(f"**–í—ã–±—Ä–∞–Ω–æ:** {', '.join(selected_change_services)}")
                
                # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –≤—ã–±–æ—Ä–µ —Å–ª—É–∂–±
                service_confidence = change.get("serviceConfidence", 0)
                if service_confidence > 0:
                    st.markdown(f"**üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –≤—ã–±–æ—Ä–µ —Å–ª—É–∂–±:** {service_confidence:.1f}%")
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    st.progress(service_confidence / 100)
                    
                    if service_confidence < 50:
                        st.warning("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
                    elif service_confidence < 80:
                        st.info("‚ÑπÔ∏è –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
                    else:
                        st.success("‚úÖ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ —Å–ª—É–∂–±")

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            st.markdown("---")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.title("üîç –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    st.markdown("---")

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"])

    with tab1:
        upload_documents()

    with tab2:
        display_results()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown(
            """
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - PDF (.pdf)
        - Word (.docx)
        - –¢–µ–∫—Å—Ç (.txt)
        
        **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** 10 MB
        
        **–°—Ç–∞—Ç—É—Å API:** 
        """
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
        try:
            response = requests.get(f"{API_BASE_URL}/health", timeout=5)
            if response.status_code == 200:
                st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        st.markdown("---")

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
            if "analysis_result" in st.session_state:
                del st.session_state.analysis_result
            if "analysis_completed" in st.session_state:
                del st.session_state.analysis_completed
            st.rerun()


if __name__ == "__main__":
    main()
